spring:
  datasource:
    url: jdbc:h2:mem:testdb               # Usa il DB H2 in memoria, chiamato "testdb"
    driver-class-name: org.h2.Driver      # Driver H2
    username: sa                          # Utente predefinito
    password: ""                          # Password vuota (default)
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create                    # Hibernate crea/aggiorna le tabelle in base alle Entity
  sql:
    init:
      mode: always
  h2:
    console:
      enabled: true                       # Abilita la console web di H2
      path: /h2-console                   # Raggiungibile su http://localhost:8080/h2-console
  redis:
    host: localhost
    port: 6379

# Configurazione Resilience4j
resilience4j:
  circuitbreaker:
    instances:
      default:
        failureRateThreshold: 50
        waitDurationInOpenState: 60s
        slidingWindowSize: 5
  retry:
    instances:
      default:
        maxAttempts: 3
        waitDuration: 2s

# Configurazione Management e Metriche
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,info
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true

# Configurazione Logging Unificata
logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  level:
    root: INFO
    financial: DEBUG
    org.springframework.cache: DEBUG
    org.springframework.data.redis: DEBUG
    AUDIT_LOG: INFO
  file:
    name: logs/audit.log
    max-size: 10MB
    max-history: 30

# Configurazione Applicazione
spring.application.name: financial-api
management.tracing:
  sampling:
    probability: 1.0
  enabled: true

# Configurazione Encryption
encryption:
  secret-key: ${ENCRYPTION_KEY:aes256encryptionkey32bytes1234}
  salt: ${ENCRYPTION_SALT:5c0744940b5c369b}
